"use strict";

/*!
                                                                  _\|/_
                                                                   (o o)
            +---------------------------------oOO-(_)-OOo---------------------------------+
            |           This class was automatically generated by an npm script                |
            |               Do not modify the content of this file manually                          |
            |       Refer to package.json to run the script for client regeneration         |
            +----------------------------------------------------------------------------------+
                                                                 (_| |_)
 */

const _ = require("mg-core/lodash");
const MgBaseHttpClient = require("mg-core/http/mgBaseHttpClient");
const SwaggerSpecsParser = require("mg-core/swagger/swaggerSpecsParser");
const Ajv = require("mg-core/ajv");
const logger = require("mg-core/log4js").getLogger("DiscoverClient");

/* eslint-disable no-trailing-spaces */

/**
 * @typedef {Object} ClientOptions
 * @property {string} url - base url to connect
 * @property {number} timeout - connection timeout in ms, if not set default timeout is 3000ms
 * @property {number} retryCounter -the retry counter if retry strategy is enabled
 * @property {string|Buffer} sslCert - TLS client cert
 * @property {string|Buffer} sslKey - TLS client key (PKCS8)
 * @property {string} sslPass - TLS client key passphrase
 * @property {string|Buffer} sslCA - TLS ca certificate chain
 * @property {function} fnCbErrorInBody - [Optional] Function CallBack to determine if error in body response for monitoring.
 *
 * Discover Token Services - Stored Payment Token and Token Requestor Boarding
 * version: 1.0.0
 * @class DiscoverClient
 */

class DiscoverClient extends MgBaseHttpClient {
    /**
     * Constructor
     * @param {ClientOptions} options - client options
     */
    constructor(options) {
        super("DiscoverClient", options);

        /* eslint-disable quote-props */
        this.swaggerSpecs = {
            "swagger": "2.0",
            "info": {
                "version": "1.0.0",
                "title": "Discover API",
                "description": "Discover Token Services - Stored Payment Token and Token Requestor Boarding",
                "termsOfService": "2021 DFS Services LLC",
                "contact": {
                    "name": "Gemalto MFS STA Team"
                }
            },
            "basePath": "/",
            "schemes": ["http", "https"],
            "consumes": ["application/json/consumes"],
            "produces": ["application/json/produces"],
            "parameters": {
                "path-requestId": {
                    "name": "requestId",
                    "in": "path",
                    "description": "UUID of a unique request.",
                    "required": true,
                    "type": "string"
                },
                "path-taskId": {
                    "name": "taskId",
                    "in": "path",
                    "description": "UUID of a unique task identifier for any tracking.",
                    "required": true,
                    "type": "string"
                },
                "Accept": {
                    "name": "AcceptTest",
                    "in": "header",
                    "description": "Only accept application/json type.",
                    "required": true,
                    "type": "string"
                },
                "Content-Type": {
                    "name": "Content-Type-Test",
                    "in": "header",
                    "description": "Only accept application/json type.",
                    "required": true,
                    "type": "string"
                },
                "Cache-Control": {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "no-store",
                    "required": true,
                    "type": "string"
                },
                "Authorization": {
                    "name": "Authorization",
                    "in": "header",
                    "description": "Bearer access_token",
                    "required": true,
                    "type": "string"
                },
                "x-dsf-c-app-jwt": {
                    "name": "X-DFS-C-APP-JWT",
                    "in": "header",
                    "description": "JWT token",
                    "required": true,
                    "type": "string"
                },
                "x-dsf-api-plan": {
                    "name": "X-DFS-API-PLAN",
                    "in": "header",
                    "description": "Intended API plan",
                    "required": true,
                    "type": "string"
                },
                "tokenHeaderTest": {
                    "name": "tokenHeaderTest",
                    "in": "header",
                    "description": "token to be passed as a header",
                    "required": true,
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "paths": {
                "/globalpymt/ddx/stored-payment-token/boarding/v1/token-requestors": {
                    "post": {
                        "description": "Use this endpoint to register a new token requestor profile with the Discover Network.",
                        "operationId": "onboardMerchant",
                        "parameters": [{
                            "$ref": "#/parameters/Accept"
                        }, {
                            "$ref": "#/parameters/Content-Type"
                        }, {
                            "$ref": "#/parameters/Cache-Control"
                        }, {
                            "$ref": "#/parameters/Authorization"
                        }, {
                            "$ref": "#/parameters/x-dsf-c-app-jwt"
                        }, {
                            "$ref": "#/parameters/x-dsf-api-plan"
                        }, {
                            "in": "body",
                            "name": "body",
                            "schema": {
                                "$ref": "#/definitions/onboardingMerchantRequest"
                            }
                        }],
                        "responses": {
                            "202": {
                                "description": "OK, success"
                            },
                            "400": {
                                "description": "Bad Request"
                            },
                            "401": {
                                "description": "Unauthorized"
                            },
                            "403": {
                                "description": "Forbidden"
                            },
                            "500": {
                                "description": "Internal Server Error"
                            },
                            "503": {
                                "description": "Service Unavailable"
                            }
                        }
                    }
                },
                "/globalpymt/ddx/stored-payment-token/boarding/v1/request/{requestId}/task/{taskId}/token-requestors": {
                    "get": {
                        "description": "Use this endpoint to obtain results of the boarding request.",
                        "operationId": "onboardMerchantResult",
                        "produces": ["application/json"],
                        "parameters": [{
                            "$ref": "#/parameters/path-requestId"
                        }, {
                            "$ref": "#/parameters/path-taskId"
                        }, {
                            "$ref": "#/parameters/Accept"
                        }, {
                            "$ref": "#/parameters/Content-Type"
                        }, {
                            "$ref": "#/parameters/Cache-Control"
                        }, {
                            "$ref": "#/parameters/Authorization"
                        }, {
                            "$ref": "#/parameters/x-dsf-c-app-jwt"
                        }, {
                            "$ref": "#/parameters/x-dsf-api-plan"
                        }],
                        "responses": {
                            "200": {
                                "description": "OK, success",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "onboardMerchantResultResponse": {
                                            "$ref": "#/definitions/onboardingMerchantResultResponse"
                                        }
                                    }
                                }
                            },
                            "400": {
                                "description": "Bad Request"
                            },
                            "401": {
                                "description": "Unauthorized"
                            },
                            "403": {
                                "description": "Forbidden"
                            },
                            "500": {
                                "description": "Internal Server Error"
                            },
                            "503": {
                                "description": "Service Unavailable"
                            }
                        }
                    }
                },
                "/globalpymt/ddx/stored-payment-token/boarding/v1/request/{requestId}/task/{taskId}/token-requestors/task-status": {
                    "get": {
                        "description": "Use this endpoint to check the status of the boarding request.",
                        "operationId": "onboardMerchantStatus",
                        "produces": ["application/json"],
                        "parameters": [{
                            "$ref": "#/parameters/path-requestId"
                        }, {
                            "$ref": "#/parameters/path-taskId"
                        }, {
                            "$ref": "#/parameters/Accept"
                        }, {
                            "$ref": "#/parameters/Content-Type"
                        }, {
                            "$ref": "#/parameters/Cache-Control"
                        }, {
                            "$ref": "#/parameters/Authorization"
                        }, {
                            "$ref": "#/parameters/x-dsf-c-app-jwt"
                        }, {
                            "$ref": "#/parameters/x-dsf-api-plan"
                        }],
                        "responses": {
                            "202": {
                                "description": "Onboarding Request Pending"
                            },
                            "302": {
                                "description": "Onboarding Request Available"
                            }
                        }
                    }
                },
                "/globalpymt/ddx/stored-payment-token/operations/v1/token": {
                    "post": {
                        "description": "This endpoint can be used by a token requestor to request payment token for a consumer account.",
                        "operationId": "tokenProvision",
                        "parameters": [{
                            "$ref": "#/parameters/Accept"
                        }, {
                            "$ref": "#/parameters/Content-Type"
                        }, {
                            "$ref": "#/parameters/Cache-Control"
                        }, {
                            "$ref": "#/parameters/Authorization"
                        }, {
                            "$ref": "#/parameters/x-dsf-c-app-jwt"
                        }, {
                            "$ref": "#/parameters/x-dsf-api-plan"
                        }, {
                            "in": "body",
                            "name": "body",
                            "schema": {
                                "$ref": "#/definitions/tokenProvisionRequest"
                            }
                        }],
                        "responses": {
                            "200": {
                                "description": "OK, success",
                                "schema": {
                                    "$ref": "#/definitions/tokenProvisionResponse"
                                }
                            },
                            "400": {
                                "description": "Bad Request"
                            },
                            "401": {
                                "description": "Unauthorized"
                            },
                            "403": {
                                "description": "Forbidden"
                            },
                            "500": {
                                "description": "Internal Server Error"
                            },
                            "503": {
                                "description": "Service Unavailable"
                            }
                        }
                    }
                }
            },
            "definitions": {
                "onboardingMerchantRequest": {
                    "type": "object",
                    "description": "onboarding request",
                    "required": ["requestId", "taskId", "tokenRequestorPartyId", "TokenRequestorInfo"],
                    "properties": {
                        "requestId": {
                            "description": "UUID of a unique request.",
                            "type": "string"
                        },
                        "taskId": {
                            "description": "UUID of a unique task identifier for any tracking.",
                            "type": "string"
                        },
                        "tokenRequestorPartyId": {
                            "description": "Identifies the participant responsible for registering the token requestor profiles with the Discover Network. The participant can register a token requestor profile for itself or for its merchants. Token Requestor aggregator shall receive tokenRequestorPartyId from Discover AE prior to registering token requestors.",
                            "type": "string"
                        },
                        "tokenRequestorInfo": {
                            "$ref": "#/definitions/tokenRequestorInfo"
                        }
                    }
                },
                "tokenProvisionRequest": {
                    "type": "object",
                    "required": ["requestId", "taskId", "tokenRequestorPartyId", "tokenRequestorId", "countryOfProvision", "encryptedProvisionAccountContext", "sourceOfTokenRequestor", "cardHolderData"],
                    "properties": {
                        "requestId": {
                            "description": "UUID of a unique request.",
                            "type": "string"
                        },
                        "taskId": {
                            "description": "UUID of a unique task identifier for any tracking.",
                            "type": "string"
                        },
                        "tokenRequestorPartyId": {
                            "description": "Identifies the participant responsible for registering the token requestor profiles with the Discover Network.",
                            "type": "string"
                        },
                        "tokenRequestorId": {
                            "description": "Identifies the token requestor requesting profile updates.",
                            "type": "string"
                        },
                        "countryOfProvision": {
                            "description": "Identifies the token requestor requesting profile updates.",
                            "type": "string"
                        },
                        "encryptedProvisionAccountContext": {
                            "$ref": "#/definitions/encryptedProvisionAccountContext"
                        },
                        "sourceOfTokenRequestor": {
                            "description": "Identifies source of cardholder account information for tokenization.",
                            "type": "string",
                            "enum": ["ON_FILE", "USER_INPUT"]
                        },
                        "cardHolderData": {
                            "$ref": "#/definitions/cardHolderData"
                        }
                    }
                },
                "tokenProvisionResponse": {
                    "type": "object",
                    "required": ["responseId", "taskId", "tokenRequestorPartyId", "tokenRequestorId", "tokenProvisioningDecision", "provisionAccountMetadataContext", "encryptedtokenContext", "issuerContext"],
                    "description": "token provision response",
                    "properties": {
                        "tokenReferenceId": {
                            "description": "Opaque identifier for the Payment Token in the wallet associated to the token requestor id.",
                            "type": "string"
                        },
                        "tokenProvisioningDecision": {
                            "description": "token provision result",
                            "enum": ["Approved", "Declined"],
                            "type": "string"
                        },
                        "paymentAccountReference": {
                            "description": "Payment Account Reference (PAR) is a unique identifier associated with a specific cardholder.",
                            "type": "string"
                        },
                        "provisionAccountMetadataContext": {
                            "$ref": "#/definitions/provisionAccountMetadataContext"
                        },
                        "encryptedtokenContext": {
                            "$ref": "#/definitions/encryptedtokenContext"
                        },
                        "issuerContext": {
                            "$ref": "#/definitions/issuerContext"
                        }
                    }
                },
                "onboardingMerchantResultResponse": {
                    "type": "object",
                    "description": "onboarding merchant result response",
                    "required": ["responseId", "taskId", "tokenRequestorDataList"],
                    "properties": {
                        "responseId": {
                            "description": "UUID of a unique request.",
                            "type": "string"
                        },
                        "taskId": {
                            "description": "UUID of a unique task identifier for any tracking.",
                            "type": "string"
                        },
                        "tokenRequestorDataList": {
                            "$ref": "#/definitions/tokenRequestorDataList"
                        }
                    }
                },
                "encryptedProvisionAccountContext": {
                    "description": "JWE encrypted object encapsulating payment token related information.",
                    "properties": {
                        "primaryAccountNumber": {
                            "description": "Primary Account Number. A variable length, ISO/IEC 7812-compliant account number that is generated within account ranges associated with a BIN by a Card Issuer.",
                            "type": "string"
                        },
                        "expirationMonth": {
                            "description": "Expiration month of the Payment Card expressed as a two-digit calendar month.",
                            "type": "string"
                        },
                        "expirationYear": {
                            "description": "Expiration year of the Payment Card expressed as four-digit calendar year.",
                            "type": "string"
                        }
                    },
                    "required": ["primaryAccountNumber", "expirationMonth", "expirationYear"]
                },
                "cardHolderData": {
                    "description": "Contains card holder details. Either cardholderData or consumerData must be present",
                    "properties": {
                        "cardholderName": {
                            "description": "Cardholder Name",
                            "type": "string"
                        }
                    },
                    "required": ["cardholderName"]
                },
                "provisionAccountMetadataContext": {
                    "description": "Contains Account information.",
                    "required": ["cardType", "productDescription", "cardImageId", "panSuffix", "currentExpirationMonth", "currentExpirationYear", "foregroundColor"],
                    "properties": {
                        "cardType": {
                            "description": "Card type, Debit/Credit.",
                            "type": "string"
                        },
                        "productDescription": {
                            "description": "Discover Card Description.",
                            "type": "string",
                            "enum": ["Discover It", "Discover More", "Discover Miles"]
                        },
                        "cardImageId": {
                            "description": "Card image id",
                            "type": "string"
                        },
                        "panSuffix": {
                            "description": "last 4 digits of the PAN",
                            "type": "string"
                        },
                        "currentExpirationMonth": {
                            "description": "Expiration month of the Payment Card expressed as a two-digit calendar month.",
                            "type": "string"
                        },
                        "currentExpirationYear": {
                            "description": "Expiration year of the Payment Card expressed as four-digit calendar year.",
                            "type": "string"
                        },
                        "foregroundColor": {
                            "description": "Color of the text in the front of the card art (e.g., PAN suffix).",
                            "type": "string"
                        }
                    }
                },
                "encryptedtokenContext": {
                    "description": "JWE encrypted object encapsulating payment token related information.",
                    "required": ["token", "ExpMonth", "ExpYear", "Status"],
                    "properties": {
                        "token": {
                            "description": "A unique Payment Token associated with the PAN.",
                            "type": "string"
                        },
                        "ExpMonth": {
                            "description": "Token Expiration Month.",
                            "type": "string"
                        },
                        "ExpYear": {
                            "description": "Token Expiration Year.",
                            "type": "string"
                        },
                        "Status": {
                            "description": "Status of payment token.",
                            "type": "string",
                            "enum": ["Active", "Unlik"]
                        }
                    }
                },
                "issuerContext": {
                    "description": "JWE encrypted object encapsulating issuer related information",
                    "required": ["issuerName"],
                    "properties": {
                        "issuerName": {
                            "description": "Full name of the issuing bank.",
                            "type": "string"
                        },
                        "privacyPolicyURL": {
                            "description": "Privacy policy URL of the Issuer.",
                            "type": "string"
                        },
                        "termsConditionsURL": {
                            "description": "Terms & Conditions URL of the Issuer.",
                            "type": "string"
                        }
                    }
                },
                "tokenRequestorInfo": {
                    "description": "UUID that identifies merchants in the TokenRequestorInfo list from other merchants within the same list.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": ["recordLevelId", "tokenRequestorName", "tokenLocation", "tokenRequestorType", "tokenType"],
                        "properties": {
                            "recordLevelId": {
                                "description": "UUID that identifies merchants in the TokenRequestorInfo list from other merchants within the same list.",
                                "type": "string"
                            },
                            "tokenRequestorName": {
                                "description": "Identifies the name of the entity being registered with the Network TSP.",
                                "type": "string"
                            },
                            "tokenLocation": {
                                "description": "Fixed to 01, Identifies mode of storage of the token by token requestor based on EMVCo definition.",
                                "type": "string"
                            },
                            "tokenRequestorType": {
                                "description": "Identifies the type of the token requestor per EMVCo definition.",
                                "type": "string",
                                "enum": ["MERCHANT", "SHARED"]
                            },
                            "tokenType": {
                                "description": "Specifies type of token requested.",
                                "type": "string",
                                "enum": ["01 - Card on File (individual Merchant)", "CL - Cloud Based Emulation"]
                            }
                        }
                    }
                },
                "tokenRequestorDataList": {
                    "description": "UUID that identifies merchants in the TokenRequestorInfo list from other merchants within the same list.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": ["recordLevelId", "tokenRequestorName", "tokenRequestorId", "assignedDRCCategoryCode", "tokenType"],
                        "properties": {
                            "recordLevelId": {
                                "description": "UUID that identifies merchants in the TokenRequestorResponseData list from other merchants within the same list.",
                                "type": "string"
                            },
                            "tokenRequestorName": {
                                "description": "Identifies the DBA name (legal name) of the token requestor requesting profile updates.",
                                "type": "string"
                            },
                            "tokenRequestorId": {
                                "description": "Identifies the token requestor requesting profile updates*",
                                "type": "string"
                            },
                            "assignedDRCCategoryCode": {
                                "description": "Domain Restriction Control category code per DGN recommended categories as discussed with DGN AE",
                                "type": "string",
                                "enum": ["ACQUIRED_MERCH_RUL1", "ACQUIRED_MERCH_RUL2", "COF_RUL1", "SE_WALLET_RUL1"]
                            },
                            "tokenType": {
                                "description": "Specifies type of token requested.",
                                "type": "string",
                                "enum": ["01 - Card on File (individual Merchant)", "CL - Cloud Based Emulation"]
                            }
                        }
                    }
                }
            }
        };
        /* eslint-enable quote-props */

        this.operationsMetadata = new SwaggerSpecsParser(this.swaggerSpecs).getOperations();
        this.clientValidation = options.clientValidation;
        if (this.clientValidation && process.env.NODE_ENV === "development") {
            this.ajv = new Ajv({
                allErrors: true,
                jsonPointers: true,
                verbose: true,
                validateSchema: true,
                missingRefs: true,
                unknownFormats: ["base64"]
            });
            this.ajv.addSchema(this.swaggerSpecs, 'swaggerSpecs');
        }
    }

    /**
     * Use this endpoint to register a new token requestor profile with the Discover Network.
     * @method
     * @name DiscoverClient#onboardMerchant
     * @param {string} acceptTest - Only accept application/json type.
     * @param {string} contentTypeTest - Only accept application/json type.
     * @param {string} cacheControl - no-store
     * @param {string} authorization - Bearer access_token
     * @param {string} xDfsCAppJwt - JWT token
     * @param {string} xDfsApiPlan - Intended API plan
     * @param {} body - Discover Token Services - Stored Payment Token and Token Requestor Boarding
     *
     */
    // eslint-disable-next-line complexity
    onboardMerchant(parameters, ctx) {
        if (parameters === undefined) {
            parameters = {};
        }

        const baseUri = this.url;

        // eslint-disable-next-line prefer-const
        let path2 = "/globalpymt/ddx/stored-payment-token/boarding/v1/token-requestors";

        let body;
        const queryParameters = {};
        const headers = {};
        const form = {};

        headers["Accept"] = ['application/json/produces'];
        headers["Content-Type"] = ['application/json/consumes'];

        if (parameters["acceptTest"] !== undefined) {
            headers["AcceptTest"] = parameters["acceptTest"];
        }

        if (parameters["acceptTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: acceptTest"));
        }

        if (parameters["contentTypeTest"] !== undefined) {
            headers["Content-Type-Test"] = parameters["contentTypeTest"];
        }

        if (parameters["contentTypeTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: contentTypeTest"));
        }

        if (parameters["cacheControl"] !== undefined) {
            headers["Cache-Control"] = parameters["cacheControl"];
        }

        if (parameters["cacheControl"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: cacheControl"));
        }

        if (parameters["authorization"] !== undefined) {
            headers["Authorization"] = parameters["authorization"];
        }

        if (parameters["authorization"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: authorization"));
        }

        if (parameters["xDfsCAppJwt"] !== undefined) {
            headers["X-DFS-C-APP-JWT"] = parameters["xDfsCAppJwt"];
        }

        if (parameters["xDfsCAppJwt"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsCAppJwt"));
        }

        if (parameters["xDfsApiPlan"] !== undefined) {
            headers["X-DFS-API-PLAN"] = parameters["xDfsApiPlan"];
        }

        if (parameters["xDfsApiPlan"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsApiPlan"));
        }

        if (parameters["body"] !== undefined) {
            body = parameters["body"];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                const parameter = parameters.$queryParameters[parameterName];
                queryParameters[parameterName] = parameter;
            });
        }
        if (parameters.$headers) {
            Object.keys(parameters.$headers).forEach(function(headerName) {
                const header = parameters.$headers[headerName];
                headers[headerName] = header;
            });
        }
        const error = this._validateRequest("onboardMerchant", body);
        if (error) {
            return error;
        }

        const requestOptions = {
            method: "POST",
            uri: baseUri + path,
            qs: queryParameters,
            headers,
            body,
            preRequestCallBackParams: parameters.$preRequestCallBackParams
        };

        if (Object.keys(form).length > 0) {
            requestOptions.form = form;
        }

        let monitoringCtx = _.cloneDeep(ctx || {});

        monitoringCtx = _.extend(monitoringCtx, _.pick(requestOptions, ["uri", "method"]));
        if (!monitoringCtx.operationName) {
            monitoringCtx.operationName = "onboardMerchant";
        }

        return this._sendRequest(requestOptions, monitoringCtx);
    }
    /**
     * Use this endpoint to obtain results of the boarding request.
     * @method
     * @name DiscoverClient#onboardMerchantResult
     * @param {string} requestId - UUID of a unique request.
     * @param {string} taskId - UUID of a unique task identifier for any tracking.
     * @param {string} acceptTest - Only accept application/json type.
     * @param {string} contentTypeTest - Only accept application/json type.
     * @param {string} cacheControl - no-store
     * @param {string} authorization - Bearer access_token
     * @param {string} xDfsCAppJwt - JWT token
     * @param {string} xDfsApiPlan - Intended API plan
     *
     */
    // eslint-disable-next-line complexity
    onboardMerchantResult(parameters, ctx) {
        if (parameters === undefined) {
            parameters = {};
        }

        const baseUri = this.url;

        // eslint-disable-next-line prefer-const
        let path2 = "/globalpymt/ddx/stored-payment-token/boarding/v1/request/{requestId}/task/{taskId}/token-requestors";

        let body;
        const queryParameters = {};
        const headers = {};
        const form = {};

        headers["Accept"] = ['application/json'];
        headers["Content-Type"] = ['application/json/consumes'];

        path = path.replace("{requestId}", parameters["requestId"]);

        if (parameters["requestId"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: requestId"));
        }

        path = path.replace("{taskId}", parameters["taskId"]);

        if (parameters["taskId"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: taskId"));
        }

        if (parameters["acceptTest"] !== undefined) {
            headers["AcceptTest"] = parameters["acceptTest"];
        }

        if (parameters["acceptTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: acceptTest"));
        }

        if (parameters["contentTypeTest"] !== undefined) {
            headers["Content-Type-Test"] = parameters["contentTypeTest"];
        }

        if (parameters["contentTypeTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: contentTypeTest"));
        }

        if (parameters["cacheControl"] !== undefined) {
            headers["Cache-Control"] = parameters["cacheControl"];
        }

        if (parameters["cacheControl"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: cacheControl"));
        }

        if (parameters["authorization"] !== undefined) {
            headers["Authorization"] = parameters["authorization"];
        }

        if (parameters["authorization"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: authorization"));
        }

        if (parameters["xDfsCAppJwt"] !== undefined) {
            headers["X-DFS-C-APP-JWT"] = parameters["xDfsCAppJwt"];
        }

        if (parameters["xDfsCAppJwt"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsCAppJwt"));
        }

        if (parameters["xDfsApiPlan"] !== undefined) {
            headers["X-DFS-API-PLAN"] = parameters["xDfsApiPlan"];
        }

        if (parameters["xDfsApiPlan"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsApiPlan"));
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                const parameter = parameters.$queryParameters[parameterName];
                queryParameters[parameterName] = parameter;
            });
        }
        if (parameters.$headers) {
            Object.keys(parameters.$headers).forEach(function(headerName) {
                const header = parameters.$headers[headerName];
                headers[headerName] = header;
            });
        }
        const error = this._validateRequest("onboardMerchantResult", body);
        if (error) {
            return error;
        }

        const requestOptions = {
            method: "GET",
            uri: baseUri + path,
            qs: queryParameters,
            headers,
            body,
            preRequestCallBackParams: parameters.$preRequestCallBackParams
        };

        if (this.operationsMetadata.onboardMerchantResult.produces && this.operationsMetadata.onboardMerchantResult.produces.includes("application/json")) {
            requestOptions.json = true;
        }

        if (Object.keys(form).length > 0) {
            requestOptions.form = form;
        }

        let monitoringCtx = _.cloneDeep(ctx || {});

        monitoringCtx = _.extend(monitoringCtx, _.pick(requestOptions, ["uri", "method"]));
        if (!monitoringCtx.operationName) {
            monitoringCtx.operationName = "onboardMerchantResult";
        }

        return this._sendRequest(requestOptions, monitoringCtx);
    }
    /**
     * Use this endpoint to check the status of the boarding request.
     * @method
     * @name DiscoverClient#onboardMerchantStatus
     * @param {string} requestId - UUID of a unique request.
     * @param {string} taskId - UUID of a unique task identifier for any tracking.
     * @param {string} acceptTest - Only accept application/json type.
     * @param {string} contentTypeTest - Only accept application/json type.
     * @param {string} cacheControl - no-store
     * @param {string} authorization - Bearer access_token
     * @param {string} xDfsCAppJwt - JWT token
     * @param {string} xDfsApiPlan - Intended API plan
     *
     */
    // eslint-disable-next-line complexity
    onboardMerchantStatus(parameters, ctx) {
        if (parameters === undefined) {
            parameters = {};
        }

        const baseUri = this.url;

        // eslint-disable-next-line prefer-const
        let path2 = "/globalpymt/ddx/stored-payment-token/boarding/v1/request/{requestId}/task/{taskId}/token-requestors/task-status";

        let body;
        const queryParameters = {};
        const headers = {};
        const form = {};

        headers["Accept"] = ['application/json'];
        headers["Content-Type"] = ['application/json/consumes'];

        path = path.replace("{requestId}", parameters["requestId"]);

        if (parameters["requestId"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: requestId"));
        }

        path = path.replace("{taskId}", parameters["taskId"]);

        if (parameters["taskId"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: taskId"));
        }

        if (parameters["acceptTest"] !== undefined) {
            headers["AcceptTest"] = parameters["acceptTest"];
        }

        if (parameters["acceptTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: acceptTest"));
        }

        if (parameters["contentTypeTest"] !== undefined) {
            headers["Content-Type-Test"] = parameters["contentTypeTest"];
        }

        if (parameters["contentTypeTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: contentTypeTest"));
        }

        if (parameters["cacheControl"] !== undefined) {
            headers["Cache-Control"] = parameters["cacheControl"];
        }

        if (parameters["cacheControl"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: cacheControl"));
        }

        if (parameters["authorization"] !== undefined) {
            headers["Authorization"] = parameters["authorization"];
        }

        if (parameters["authorization"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: authorization"));
        }

        if (parameters["xDfsCAppJwt"] !== undefined) {
            headers["X-DFS-C-APP-JWT"] = parameters["xDfsCAppJwt"];
        }

        if (parameters["xDfsCAppJwt"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsCAppJwt"));
        }

        if (parameters["xDfsApiPlan"] !== undefined) {
            headers["X-DFS-API-PLAN"] = parameters["xDfsApiPlan"];
        }

        if (parameters["xDfsApiPlan"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsApiPlan"));
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                const parameter = parameters.$queryParameters[parameterName];
                queryParameters[parameterName] = parameter;
            });
        }
        if (parameters.$headers) {
            Object.keys(parameters.$headers).forEach(function(headerName) {
                const header = parameters.$headers[headerName];
                headers[headerName] = header;
            });
        }
        const error = this._validateRequest("onboardMerchantStatus", body);
        if (error) {
            return error;
        }

        const requestOptions = {
            method: "GET",
            uri: baseUri + path,
            qs: queryParameters,
            headers,
            body,
            preRequestCallBackParams: parameters.$preRequestCallBackParams
        };

        if (this.operationsMetadata.onboardMerchantStatus.produces && this.operationsMetadata.onboardMerchantStatus.produces.includes("application/json")) {
            requestOptions.json = true;
        }

        if (Object.keys(form).length > 0) {
            requestOptions.form = form;
        }

        let monitoringCtx = _.cloneDeep(ctx || {});

        monitoringCtx = _.extend(monitoringCtx, _.pick(requestOptions, ["uri", "method"]));
        if (!monitoringCtx.operationName) {
            monitoringCtx.operationName = "onboardMerchantStatus";
        }

        return this._sendRequest(requestOptions, monitoringCtx);
    }
    /**
     * This endpoint can be used by a token requestor to request payment token for a consumer account.
     * @method
     * @name DiscoverClient#tokenProvision
     * @param {string} acceptTest - Only accept application/json type.
     * @param {string} contentTypeTest - Only accept application/json type.
     * @param {string} cacheControl - no-store
     * @param {string} authorization - Bearer access_token
     * @param {string} xDfsCAppJwt - JWT token
     * @param {string} xDfsApiPlan - Intended API plan
     * @param {} body - Discover Token Services - Stored Payment Token and Token Requestor Boarding
     *
     */
    // eslint-disable-next-line complexity
    tokenProvision(parameters, ctx) {
        if (parameters === undefined) {
            parameters = {};
        }

        const baseUri = this.url;

        // eslint-disable-next-line prefer-const
        let path2 = "/globalpymt/ddx/stored-payment-token/operations/v1/token";

        let body;
        const queryParameters = {};
        const headers = {};
        const form = {};

        headers["Accept"] = ['application/json/produces'];
        headers["Content-Type"] = ['application/json/consumes'];

        if (parameters["acceptTest"] !== undefined) {
            headers["AcceptTest"] = parameters["acceptTest"];
        }

        if (parameters["acceptTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: acceptTest"));
        }

        if (parameters["contentTypeTest"] !== undefined) {
            headers["Content-Type-Test"] = parameters["contentTypeTest"];
        }

        if (parameters["contentTypeTest"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: contentTypeTest"));
        }

        if (parameters["cacheControl"] !== undefined) {
            headers["Cache-Control"] = parameters["cacheControl"];
        }

        if (parameters["cacheControl"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: cacheControl"));
        }

        if (parameters["authorization"] !== undefined) {
            headers["Authorization"] = parameters["authorization"];
        }

        if (parameters["authorization"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: authorization"));
        }

        if (parameters["xDfsCAppJwt"] !== undefined) {
            headers["X-DFS-C-APP-JWT"] = parameters["xDfsCAppJwt"];
        }

        if (parameters["xDfsCAppJwt"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsCAppJwt"));
        }

        if (parameters["xDfsApiPlan"] !== undefined) {
            headers["X-DFS-API-PLAN"] = parameters["xDfsApiPlan"];
        }

        if (parameters["xDfsApiPlan"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: xDfsApiPlan"));
        }

        if (parameters["body"] !== undefined) {
            body = parameters["body"];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                const parameter = parameters.$queryParameters[parameterName];
                queryParameters[parameterName] = parameter;
            });
        }
        if (parameters.$headers) {
            Object.keys(parameters.$headers).forEach(function(headerName) {
                const header = parameters.$headers[headerName];
                headers[headerName] = header;
            });
        }
        const error = this._validateRequest("tokenProvision", body);
        if (error) {
            return error;
        }

        const requestOptions = {
            method: "POST",
            uri: baseUri + path,
            qs: queryParameters,
            headers,
            body,
            preRequestCallBackParams: parameters.$preRequestCallBackParams
        };

        if (Object.keys(form).length > 0) {
            requestOptions.form = form;
        }

        let monitoringCtx = _.cloneDeep(ctx || {});

        monitoringCtx = _.extend(monitoringCtx, _.pick(requestOptions, ["uri", "method"]));
        if (!monitoringCtx.operationName) {
            monitoringCtx.operationName = "tokenProvision";
        }

        return this._sendRequest(requestOptions, monitoringCtx);
    }
    _validateRequest(methodName, body) {
        if (this.clientValidation && process.env.NODE_ENV === "development") {
            const validator = this.ajv.compile({
                $ref: 'swaggerSpecs#/definitions/' + methodName + 'Req'
            });
            const valid = validator(body);
            if (!valid) {
                logger.error("Validation errors on  for parameters %j : %j: ", body, validator.errors);
                return Promise.reject(new Error("Validation error: " + JSON.stringify(validator.errors)));
            }
        }
    }
}
module.exports = DiscoverClient;