/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
{{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 *
 */
 // eslint-disable-next-line complexity
{{&methodName}}(parameters,ctx){
    if(parameters === undefined) {
        parameters = {};
    }

    const baseUri = this.url;

    {{#hasBasePath}}
        // eslint-disable-next-line prefer-const
        let path = "{{&basePath}}{{&path}}";
    {{/hasBasePath}}
    {{^hasBasePath}}
        // eslint-disable-next-line prefer-const
        let path = "{{&path}}";
    {{/hasBasePath}}

    let body;
    const queryParameters = {};
    const headers = {};
    const form = {};

    {{#isSecure}}
        if(this.token){
            if (this.token.isQuery) {
                queryParameters[this.token.headerOrQueryName] = this.token.value;
            } else if (this.token.headerOrQueryName) {
                headers[this.token.headerOrQueryName] = this.token.value;
            } else {
                headers["Authorization"] = "Bearer " + this.token.value;
            }
        }
    {{/isSecure}}

    {{#headers}}
        headers["{{&name}}"] = [{{&value}}];
    {{/headers}}

    {{#parameters}}

        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters["{{&name}}"] = "{{&singleton}}";
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                        if(new RegExp("{{&pattern}}").test(parameterName)){
                            queryParameters[parameterName] = parameters[parameterName];
                        }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                if(parameters["{{&camelCaseName}}"] !== undefined){
                    queryParameters["{{&name}}"] = parameters["{{&camelCaseName}}"];
                }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}

        {{#isPathParameter}}
            path = path.replace("{{=<% %>=}}{<%&name%>}<%={{ }}=%>", parameters["{{&camelCaseName}}"]);
        {{/isPathParameter}}

        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers["{{&name}}"] = "{{&singleton}}";
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters["{{&camelCaseName}}"] !== undefined){
                    headers["{{&name}}"] = parameters["{{&camelCaseName}}"];
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}

        {{#isBodyParameter}}
            if(parameters["{{&camelCaseName}}"] !== undefined){
                body = parameters["{{&camelCaseName}}"];
            }
        {{/isBodyParameter}}

         {{#isFormParameter}}
            {{#isSingleton}}
                form["{{&name}}"] = "{{&singleton}}";
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters["{{&camelCaseName}}"] !== undefined){
                    form["{{&name}}"] = parameters["{{&camelCaseName}}"];
                }
            {{/isSingleton}}
        {{/isFormParameter}}

        {{#required}}
        if(parameters["{{&camelCaseName}}"] === undefined){
            return Promise.reject(new Error("Missing required {{&paramType}} parameter: {{&camelCaseName}}"));
        }
        {{/required}}

    {{/parameters}}

    if(parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters).forEach(function(parameterName){
            const parameter = parameters.$queryParameters[parameterName];
            queryParameters[parameterName] = parameter;
        });
    }
    if(parameters.$headers) {
        Object.keys(parameters.$headers).forEach(function(headerName){
            const header = parameters.$headers[headerName];
            headers[headerName] = header;
        });
    }
    const error = this._validateRequest("{{&methodName}}", body);
    if(error){
        return error;
    }

    const requestOptions = {
        method: "{{method}}",
        uri: baseUri + path,
        qs: queryParameters,
        headers,
        body,
        preRequestCallBackParams: parameters.$preRequestCallBackParams
    };



    {{#isGET}}
        if ( this.operationsMetadata.{{&methodName}}.produces && this.operationsMetadata.{{&methodName}}.produces.includes("application/json")) {
            requestOptions.json=true;
        }
    {{/isGET}}

    if(Object.keys(form).length > 0) {
        requestOptions.form = form;
    }

    return this._sendRequest(requestOptions, monitoringCtx);
 }